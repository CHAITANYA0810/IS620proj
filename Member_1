drop sequence customer_id_seq;

CREATE SEQUENCE customer_id_seq START WITH 1;
--Adding Customers into the table
create or replace procedure Add_Customer(cust in INT ,
  fnam in VARCHAR,
  lnam in VARCHAR,
  mail in VARCHAR,
  cit in VARCHAR,
  stat in VARCHAR,
  zipp in VARCHAR) as
x customers%rowtype;
begin
    x.customer_ID:=cust;
    x.f_name:=fnam;
    x.l_name:=lnam;
    x.email:=mail;
    x.city:=cit;
    x.state:=stat;
    x.zip:=zipp;
    
INSERT INTO CUSTOMERS VALUES  x;
COMMIT;
dbms_output.put_line('ADDING CUSTOMER '||x.f_name||' '||x.l_name);
EXCEPTION
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

------
CREATE OR REPLACE FUNCTION FIND_CUSTOMER_ID(p_email IN VARCHAR2) RETURN NUMBER AS
    v_customer_id NUMBER;
BEGIN
    -- Find the customer ID based on the email
    SELECT customer_id INTO v_customer_id FROM Customers WHERE email = p_email;
    RETURN v_customer_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Handle the case when no customer is found for the given email
        RETURN NULL;
    WHEN OTHERS THEN
        -- Handle other exceptions
        RETURN NULL;
END;


-----
CREATE OR REPLACE PROCEDURE Add_CreditCard(
    p_email IN VARCHAR2,
    p_credit_card_number IN VARCHAR2,
    p_card_type IN VARCHAR2,
    p_exp_year IN NUMBER,
    p_exp_month IN NUMBER
) AS
    v_customer_id NUMBER;
BEGIN
    -- Find the customer ID using the helper function
    v_customer_id := FIND_CUSTOMER_ID(p_email);

    IF v_customer_id IS NOT NULL THEN
        -- Insert the new credit card into the CreditCards table
        INSERT INTO Credit_Cards(customer_id, card_number, card_type, expiration_year, expiration_month)
        VALUES (v_customer_id, p_credit_card_number, p_card_type, p_exp_year, p_exp_month);

        DBMS_OUTPUT.PUT_LINE('Credit card added successfully.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Customer not found for the given email.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-----------
CREATE OR REPLACE PROCEDURE Show_all_customers_in_state(p_state IN VARCHAR2) AS
BEGIN
    -- Display a list of all customers in the specified state
    FOR cust IN (SELECT c.F_name, c.L_name, c.email, c.city, c.state, c.zip, cc.Card_number, cc.Card_type
                 FROM Customers c
                 JOIN Credit_Cards cc ON c.customer_id = cc.customer_id
                 WHERE c.state = p_state) 
    LOOP
        DBMS_OUTPUT.PUT_LINE('Name: ' || cust.F_name ||  cust.L_name || ', Email: ' || cust.email ||
                             ', City: ' || cust.city || ', State: ' || cust.state ||
                             ', Zip: ' || cust.zip || ', Credit Card: ' || cust.card_number ||
                             ', Card Type: ' || cust.card_type);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

------------
create or replace procedure Add_CreditCard(cardno in int,CustoID in INT,cardty in VARCHAR,expyear in int,expmonth in int)as
y Credit_Cards%rowtype;
begin
    y.card_number:=cardno;
    y.customer_id:=CustoID;
    y.card_type:=cardty;
    y.expiration_year:=expyear;
    y.expiration_month:=expmonth;
INSERT INTO Credit_Cards VALUES y;
dbms_output.put_line('ADDING CREDIT CARD WITH CARD NUMBER '||y.card_number);
END;
