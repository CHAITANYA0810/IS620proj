-- Drop sequences
DROP SEQUENCE Category_id_Seq;
DROP SEQUENCE Product_id_Seq;

-- Create the sequence Category_Seq
CREATE SEQUENCE Category_id_Seq START WITH 1 INCREMENT BY 1;
-- Create the sequence Product_Seq
CREATE SEQUENCE Product_id_Seq START WITH 1 INCREMENT BY 1;

-- Procedure to add a new product category
CREATE OR REPLACE PROCEDURE Add_Category(
    p_ProductCategory_Name IN VARCHAR2,
    p_ProductCategory_Desc IN VARCHAR2
) AS
BEGIN
    INSERT INTO Product_Category(ProductCategory_ID, ProductCategory_Name, ProductCategory_Desc)
    VALUES (Category_id_Seq.NEXTVAL, p_ProductCategory_Name, p_ProductCategory_Desc);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product category added successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-- Procedure to add a new product
CREATE OR REPLACE PROCEDURE Add_Product(
    p_Product_Name IN VARCHAR2,
    p_Avail_Quant IN NUMBER,
    p_UnitPrice IN NUMBER,
    p_ProductCategory_Name IN VARCHAR2
) AS
    v_ProductCategory_ID NUMBER;
BEGIN
    -- Find the category ID using the category name
    SELECT ProductCategory_ID INTO v_ProductCategory_ID
    FROM Product_Category
    WHERE ProductCategory_Name = p_ProductCategory_Name;

    -- Insert the product information
    INSERT INTO Products(Product_ID, Product_Name, Avail_Quant, Unitprice, ProductCategory_ID)
    VALUES (Product_id_Seq.NEXTVAL, p_Product_Name, p_Avail_Quant, p_UnitPrice, v_ProductCategory_ID);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product added successfully');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Category not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE Update_Inventory(
    p_product_id IN NUMBER,
    p_units IN NUMBER
) AS
    v_existing_quantity NUMBER;
BEGIN
    -- Use cursor to fetch existing quantity
    FOR product_rec IN (SELECT Avail_quant FROM Products WHERE product_id = p_product_id) 
    LOOP
        v_existing_quantity := product_rec.Avail_Quant;
    END LOOP;

    -- Update inventory
    UPDATE Products
    SET Avail_quant = v_existing_quantity - p_units
    WHERE product_id = p_product_id;

    DBMS_OUTPUT.PUT_LINE('Inventory updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Product with ID ' || p_product_id || ' not found.');
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE Report_Inventory AS
BEGIN
    -- Use cursor to fetch inventory information
    FOR category_rec IN (SELECT ProductCategory_id, ProductCategory_name FROM Product_Category)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Category: ' || category_rec.ProductCategory_name);

        FOR product_rec IN (SELECT product_name, Avail_Quant FROM Products WHERE ProductCategory_id = category_rec.ProductCategory_id)
        LOOP
            DBMS_OUTPUT.PUT_LINE('  Product: ' || product_rec.product_name || ', Quantity: ' || product_rec.Avail_quant);
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: No data found in the inventory.');
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
