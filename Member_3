/* 9. Place_Order: A customer orders a product at a given quantity, in a given date. Input
parameters are the email of the customer, the product name, the quantity, and the
credit card number to charge. User helper functions to find the customer ID, product
ID. Every time the Place_Order procedure is called, the Update_Inventory procedure
(created by Member 2) must be called from within the Place_Order procedure. In
addition the Invoice_Customer procedure (created by Member 4) must be called.
*/

-- Drop the sequence Order_Seq
DROP SEQUENCE Order_id_Seq;

-- Create the sequence Order_Seq
CREATE SEQUENCE Order_id_Seq START WITH 1 INCREMENT BY 1;


-- Procedure to place an order
-- Run the Invoice_Customer procedure from member 4 

CREATE OR REPLACE PROCEDURE Place_Order(
    p_Email IN VARCHAR2,
    p_Product_Name IN VARCHAR2,
    p_Quantity IN NUMBER,
    p_CreditCardNumber IN VARCHAR2
) AS
    v_Customer_ID NUMBER;
    v_Product_ID NUMBER;
    v_UnitPrice NUMBER;
BEGIN
    -- Find the customer's ID using their email
    SELECT Customer_ID INTO v_Customer_ID
    FROM Customers
    WHERE Email = p_Email;

    -- Find the product's ID using the product name
    SELECT Product_ID, UnitPrice INTO v_Product_ID, v_UnitPrice
    FROM Products
    WHERE Product_Name = p_Product_Name;

    -- Insert the order information
    INSERT INTO Orders(Order_ID, Customer_ID, Product_ID, Quantity, Order_Date)
    VALUES (Order_ID_SEQ.NEXTVAL, v_Customer_ID, v_Product_ID, p_Quantity, SYSDATE);
    COMMIT;

    -- Call Update_Inventory and Invoice_Customer procedures here
    Update_Inventory(p_Product_Name, p_Quantity);
    Invoice_Customer(Order_ID_SEQ.CURRVAL, v_Customer_ID, p_CreditCardNumber, p_Quantity * v_UnitPrice);
    
    DBMS_OUTPUT.PUT_LINE('Order placed successfully');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer or product not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

/* 10. Show_Orders: Show all orders in the online market place: Customer name, product,
quantity ordered, amount charged. At the end add an additional line showing the grand
total of the number of all orders placed in the system.
*/

-- Procedure to show all orders in the online marketplace
CREATE OR REPLACE PROCEDURE Show_Orders AS
    v_GrandTotal NUMBER; -- Declare the variable for GrandTotal
BEGIN
    FOR order_info IN (
        SELECT c.f_Name,c.l_name, p.Product_Name, o.Quantity, (o.Quantity * p.UnitPrice) AS AmountCharged
        FROM Orders o
        JOIN Customers c ON o.Customer_ID = c.Customer_ID
        JOIN Products p ON o.Product_ID = p.Product_ID
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || order_info.f_Name);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || order_info.Product_Name);
        DBMS_OUTPUT.PUT_LINE('Quantity Ordered: ' || order_info.Quantity);
        DBMS_OUTPUT.PUT_LINE('Amount Charged: ' || order_info.AmountCharged);
    END LOOP;

    -- Calculate the grand total of all orders placed
    SELECT SUM(o.Quantity * p.UnitPrice)
    INTO v_GrandTotal
    FROM Orders o
    JOIN Products p ON o.Product_ID = p.Product_ID;

    -- Display the grand total
    DBMS_OUTPUT.PUT_LINE('Grand Total of All Orders: ' || v_GrandTotal);
END;

/* 11. Report_Orders_by_State: Create a procedure that takes a state as input. Report all
orders placed in the online market from that state by customer and print for each
customer: the name, email, total number of orders placed and total amount of dollars
spent. At the end, print the grand total amount of dollars spent. 
*/

-- Procedure to report orders by state
CREATE OR REPLACE PROCEDURE Report_Orders_by_State(
    p_State IN VARCHAR2
) AS
    v_StateTotal NUMBER; -- Declare the variable for StateTotal
BEGIN
    FOR state_info IN (
        SELECT c.f_Name AS CustomerName, c.Email, COUNT(o.Order_ID) AS TotalOrders, SUM(o.Quantity * p.UnitPrice) AS TotalAmount
        FROM Orders o
        JOIN Customers c ON o.Customer_ID = c.Customer_ID
        JOIN Products p ON o.Product_ID = p.Product_ID
        WHERE c.State = p_State
        GROUP BY c.f_Name, c.Email
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || state_info.CustomerName);
        DBMS_OUTPUT.PUT_LINE('Customer Email: ' || state_info.Email);
        DBMS_OUTPUT.PUT_LINE('Total Orders Placed: ' || state_info.TotalOrders);
        DBMS_OUTPUT.PUT_LINE('Total Amount Spent: ' || state_info.TotalAmount);
    END LOOP;

    -- Calculate and display the grand total amount spent in that state
    SELECT SUM(o.Quantity * p.UnitPrice)
    INTO v_StateTotal
    FROM Orders o
    JOIN Customers c ON o.Customer_ID = c.Customer_ID
    JOIN Products p ON o.Product_ID = p.Product_ID
    WHERE c.State = p_State;

    DBMS_OUTPUT.PUT_LINE('Grand Total Amount Spent in ' || p_State || ': ' || v_StateTotal);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;


/* 12. Report_Low_Inventory: Create a trigger which automatically shows on the screen, all
products that are below 50 units in stock. Show Product ID, product name, available
quantity. In a separate call (outside of the trigger) invoke Update_Inventory procedure
(created by Member 2) separately to restock a specific product. Inputs: Product name,
units (quantity) to be added to existing quantity.
*/
-- Create a stored procedure to get the product name
CREATE OR REPLACE PROCEDURE Get_Product_Name(
    p_Product_ID IN NUMBER,
    p_Product_Name OUT VARCHAR2
) AS
BEGIN
    SELECT Product_Name INTO p_Product_Name
    FROM Products
    WHERE Product_ID = p_Product_ID;
END;

-- Create the trigger
CREATE OR REPLACE TRIGGER Low_Inventory_Trigger
BEFORE INSERT ON Orders
FOR EACH ROW
DECLARE
    v_Avail_Quant NUMBER;
    v_Product_Name VARCHAR2(100); -- Adjust the size based on your actual column size
BEGIN
    -- Get the product name
    Get_Product_Name(:new.Product_ID, v_Product_Name);

    -- Get the available quantity
    SELECT Avail_Quant INTO v_Avail_Quant
    FROM Products
    WHERE Product_ID = :new.Product_ID;

    -- Check for low inventory
    IF v_Avail_Quant < 50 THEN
        DBMS_OUTPUT.PUT_LINE('Low Inventory Alert: Product ' || :new.Product_ID || ' (' || v_Product_Name || ') is below 50 units.');
    END IF;
END;

-- Procedure to restock a specific product
CREATE OR REPLACE PROCEDURE Restock_Product(
    p_Product_Name IN VARCHAR2,
    p_QuantityToAdd IN NUMBER
) AS
BEGIN
    -- Update the product's available quantity
    UPDATE Products
    SET Avail_Quant = Avail_Quant + p_QuantityToAdd
    WHERE Product_Name = p_Product_Name; -- Corrected the parameter name here
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product restocked successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

