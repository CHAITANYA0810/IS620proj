-- Drop the sequence Order_Seq
DROP SEQUENCE Order_id_Seq;

-- Create the sequence Order_Seq
CREATE SEQUENCE Order_id_Seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE Place_Order(
    p_customer_email IN VARCHAR2,
    p_product_name IN VARCHAR2,
    p_quantity IN NUMBER,
    p_credit_card_number IN VARCHAR2
) AS
    v_customer_id Customers.Customer_ID%TYPE;
    v_product_id Products.Product_ID%TYPE;
    v_order_id Orders.Order_ID%TYPE;
BEGIN
    -- Find customer ID using helper function
    v_customer_id := FIND_CUSTOMER_ID(p_customer_email);

    -- Find product ID using helper function
    v_product_id := FIND_PRODUCT_ID(p_product_name);

    -- Insert order information
    INSERT INTO Orders(Order_ID, Customer_ID, Product_ID, Quantity, Order_Date)
    VALUES (Order_id_seq.NEXTVAL, v_customer_id, v_product_id, p_quantity, SYSDATE)
    RETURNING Order_ID INTO v_order_id;

    -- Update inventory using the procedure from Member 2
    Update_Inventory(v_product_id, p_quantity);

    -- Invoice the customer using the procedure from Member 4
    Invoice_Customer(v_order_id, v_customer_id, p_credit_card_number, p_quantity);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer or product not found.');
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE SHOW_ORDERS IS
BEGIN
    FOR order_rec IN (SELECT
                        C.F_name AS Customer_Name,
                        P.Product_Name,
                        O.Quantity,
                        O.Quantity * P.UnitPrice AS Amount_Charged
                      FROM
                        Orders O
                        JOIN Customers C ON O.Customer_ID = C.Customer_ID
                        JOIN Products P ON O.Product_ID = P.Product_ID)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Customer: ' || order_rec.Customer_Name ||
                             ', Product: ' || order_rec.Product_Name ||
                             ', Quantity Ordered: ' || order_rec.Quantity ||
                             ', Amount Charged: ' || order_rec.Amount_Charged);
    END LOOP;

    -- Calculate Grand Total
    DECLARE
        v_grand_total NUMBER;
    BEGIN
        SELECT SUM(Avail_Quant * UnitPrice)
        INTO v_grand_total
        FROM Products;

        DBMS_OUTPUT.PUT_LINE('Grand Total Amount of All Orders: ' || v_grand_total);
    END;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE REPORT_ORDERS_BY_STATE (p_state IN VARCHAR2) IS
BEGIN
    FOR order_rec IN (SELECT
                        C.F_Name AS Customer_Name,
                        C.Email,
                        COUNT(*) AS Total_Orders,
                        SUM(O.Quantity * P.UnitPrice) AS Total_Amount
                      FROM
                        Orders O
                        JOIN Customers C ON O.Customer_ID = C.Customer_ID
                        JOIN Products P ON O.Product_ID = P.Product_ID
                      WHERE
                        C.State = p_state
                      GROUP BY
                        C.F_Name, C.Email)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Customer: ' || order_rec.Customer_Name ||
                             ', Email: ' || order_rec.Email ||
                             ', Total Orders: ' || order_rec.Total_Orders ||
                             ', Total Amount Spent: ' || order_rec.Total_Amount);
    END LOOP;

    -- Calculate Grand Total Amount Spent
    DECLARE
        v_grand_total NUMBER;
    BEGIN
        SELECT SUM(O.Quantity * P.UnitPrice)
        INTO v_grand_total
        FROM Orders O
        JOIN Customers C ON O.Customer_ID = C.Customer_ID
        JOIN Products P ON O.Product_ID = P.Product_ID
        WHERE C.State = p_state;

        DBMS_OUTPUT.PUT_LINE('Grand Total Amount Spent from ' || p_state || ': ' || v_grand_total);
    END;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-- Create a stored procedure to get the product name
CREATE OR REPLACE PROCEDURE Get_Product_Name(
    p_Product_ID IN NUMBER,
    p_Product_Name OUT VARCHAR2
) AS
BEGIN
    SELECT Product_Name INTO p_Product_Name
    FROM Products
    WHERE Product_ID = p_Product_ID;
END;

-- Create the trigger
CREATE OR REPLACE TRIGGER Low_Inventory_Trigger
BEFORE INSERT ON Orders
FOR EACH ROW
DECLARE
    v_Avail_Quant NUMBER;
    v_Product_Name VARCHAR2(100); -- Adjust the size based on your actual column size
BEGIN
    -- Get the product name
    Get_Product_Name(:new.Product_ID, v_Product_Name);

    -- Get the available quantity
    SELECT Avail_Quant INTO v_Avail_Quant
    FROM Products
    WHERE Product_ID = :new.Product_ID;

    -- Check for low inventory
    IF v_Avail_Quant < 50 THEN
        DBMS_OUTPUT.PUT_LINE('Low Inventory Alert: Product ' || :new.Product_ID || ' (' || v_Product_Name || ') is below 50 units.');
    END IF;
END;

-- Procedure to restock a specific product
CREATE OR REPLACE PROCEDURE Restock_Product(
    p_Product_Name IN VARCHAR2,
    p_QuantityToAdd IN NUMBER
) AS
BEGIN
    -- Update the product's available quantity
    UPDATE Products
    SET Avail_Quant = Avail_Quant + p_QuantityToAdd
    WHERE Product_Name = p_Product_Name; -- Corrected the parameter name here
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product restocked successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
