-- Procedure to add a review for a product
CREATE OR REPLACE PROCEDURE Add_Review(
    p_ReviewerEmail IN VARCHAR2,
    p_StarsGiven IN NUMBER,
    p_ProductName IN VARCHAR2,
    p_ReviewText IN CLOB
) AS
    v_ProductID NUMBER;
BEGIN
    -- Find the product's ID using the product name
    SELECT ProductID INTO v_ProductID
    FROM Products
    WHERE ProductName = p_ProductName;

    -- Insert the review information
    INSERT INTO Reviews(ReviewID, ProductID, ReviewerEmail, StarsGiven, ReviewText)
    VALUES (ReviewID_SEQ.NEXTVAL, v_ProductID, p_ReviewerEmail, p_StarsGiven, p_ReviewText);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Review added successfully');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Product not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

**Buy_Or_Beware Procedure**

CREATE OR REPLACE PROCEDURE Buy_Or_Beware(
    p_X IN NUMBER
) AS
BEGIN
    -- List top-rated products
    DBMS_OUTPUT.PUT_LINE('Top rated products:');
    FOR top_product IN (
        SELECT AVG(r.StarsGiven) AS AverageStars, p.ProductID, p.ProductName, STDDEV(r.StarsGiven) AS StandardDeviation
        FROM Reviews r
        JOIN Products p ON r.ProductID = p.ProductID
        GROUP BY p.ProductID, p.ProductName
        ORDER BY AverageStars DESC
    ) LOOP
        EXIT WHEN ROWNUM > p_X;
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || top_product.AverageStars);
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || top_product.ProductID);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || top_product.ProductName);
        DBMS_OUTPUT.PUT_LINE('Standard Deviation: ' || top_product.StandardDeviation);
    END LOOP;

    -- List products to beware
    DBMS_OUTPUT.PUT_LINE('Buyer Beware: Stay Away from:');
    FOR worst_product IN (
        SELECT AVG(r.StarsGiven) AS AverageStars, p.ProductID, p.ProductName, STDDEV(r.StarsGiven) AS StandardDeviation
        FROM Reviews r
        JOIN Products p ON r.ProductID = p.ProductID
        GROUP BY p.ProductID, p.ProductName
        ORDER BY AverageStars ASC
    ) LOOP
        EXIT WHEN ROWNUM > p_X;
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || worst_product.AverageStars);
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || worst_product.ProductID);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || worst_product.ProductName);
        DBMS_OUTPUT.PUT_LINE('Standard Deviation: ' || worst_product.StandardDeviation);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;


**Recommend_To_Customer Procedure**

-- Procedure to calculate a recommendation for a customer
CREATE OR REPLACE PROCEDURE Recommend_To_Customer(
    p_CustomerID IN NUMBER
) AS
BEGIN
    FOR customer IN (
        SELECT DISTINCT c.CustomerID, c.Name, r.ProductID AS BoughtProductID
        FROM Customers c
        JOIN Orders o ON c.CustomerID = o.CustomerID
        LEFT JOIN Recommendations r ON c.CustomerID = r.CustomerID
    ) LOOP
        FOR recommended_product IN (
            SELECT r.ProductID AS RecommendedProductID
            FROM Reviews r
            WHERE r.ProductID NOT IN (
                SELECT o.ProductID
                FROM Orders o
                WHERE o.CustomerID = customer.CustomerID
            )
            AND r.ProductID IN (
                SELECT p.ProductID
                FROM Products p
                WHERE p.CategoryID IN (
                    SELECT p.CategoryID
                    FROM Products p
                    WHERE p.ProductID = customer.BoughtProductID
                )
            )
            AND ROWNUM = 1
        ) LOOP
            -- Insert the recommendation
            INSERT INTO Recommendations(RecommendationID, CustomerID, RecommendedProductID, RecommendationDate)
            VALUES (RecommendationID_SEQ.NEXTVAL, customer.CustomerID, recommended_product.RecommendedProductID, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('Recommendation added successfully');
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

**List_Recommendations Procedure**

-- Procedure to list all customer recommendations
CREATE OR REPLACE PROCEDURE List_Recommendations AS
BEGIN
    FOR recommendation_info IN (
        SELECT c.Name AS CustomerName, p.ProductName AS RecommendedProduct, AVG(r.StarsGiven) AS AverageStars
        FROM Recommendations rec
        JOIN Customers c ON rec.CustomerID = c.CustomerID
        JOIN Products p ON rec.RecommendedProductID = p.ProductID
        JOIN Reviews r ON rec.RecommendedProductID = r.ProductID
        GROUP BY c.Name, p.ProductName
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || recommendation_info.CustomerName);
        DBMS_OUTPUT.PUT_LINE('Recommended Product: ' || recommendation_info.RecommendedProduct);
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || recommendation_info.AverageStars);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
