-- Create the sequence for Review_ID
CREATE SEQUENCE ReviewID_SEQ START WITH 1;

-- Procedure to add a review for a product
CREATE OR REPLACE PROCEDURE Add_Review(
    p_ReviewerEmail IN VARCHAR2,
    p_StarsGiven IN NUMBER,
    p_ProductName IN VARCHAR2,
    p_ReviewText IN CLOB
) AS
    v_ProductID NUMBER;
BEGIN
    -- Find the product's ID using the product name
    SELECT Product_ID INTO v_ProductID
    FROM Products
    WHERE Product_Name = p_ProductName;

    -- Insert the review information
    INSERT INTO Reviews(Review_ID, Product_ID, ReviewerEmail, StarsGiven, ReviewText)
    VALUES (ReviewID_SEQ.NEXTVAL, v_ProductID, p_ReviewerEmail, p_StarsGiven, p_ReviewText);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Review added successfully');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Product not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END Add_Review;
/



CREATE OR REPLACE PROCEDURE Buy_Or_Beware(
    p_X IN NUMBER
) AS
    v_counter NUMBER := 0;
BEGIN
    -- List top-rated products
    DBMS_OUTPUT.PUT_LINE('Top rated products:');
    FOR top_product IN (
        SELECT AVG(r.StarsGiven) AS AverageStars, p.Product_ID, p.Product_Name, STDDEV(r.StarsGiven) AS StandardDeviation
        FROM Reviews r
        JOIN Products p ON r.Product_ID = p.Product_ID
        GROUP BY p.Product_ID, p.Product_Name
        ORDER BY AverageStars DESC
    ) LOOP
        v_counter := v_counter + 1;
        EXIT WHEN v_counter > p_X;

        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || top_product.AverageStars);
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || top_product.Product_ID);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || top_product.Product_Name);
        DBMS_OUTPUT.PUT_LINE('Standard Deviation: ' || top_product.StandardDeviation);
    END LOOP;

    -- Reset counter
    v_counter := 0;

    -- List products to beware
    DBMS_OUTPUT.PUT_LINE('Buyer Beware: Stay Away from:');
    FOR worst_product IN (
        SELECT AVG(r.StarsGiven) AS AverageStars, p.Product_ID, p.Product_Name, STDDEV(r.StarsGiven) AS StandardDeviation
        FROM Reviews r
        JOIN Products p ON r.Product_ID = p.Product_ID
        GROUP BY p.Product_ID, p.Product_Name
        ORDER BY AverageStars ASC
    ) LOOP
        v_counter := v_counter + 1;
        EXIT WHEN v_counter > p_X;

        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || worst_product.AverageStars);
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || worst_product.Product_ID);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || worst_product.Product_Name);
        DBMS_OUTPUT.PUT_LINE('Standard Deviation: ' || worst_product.StandardDeviation);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/



**Recommend_To_Customer Procedure**

-- Procedure to calculate a recommendation for a customer
CREATE OR REPLACE PROCEDURE Recommend_To_Customer(
    p_CustomerID IN NUMBER
) AS
BEGIN
    FOR customer IN (
        SELECT DISTINCT c.Customer_ID, c.F_Name, c.L_Name, r.Product_ID AS BoughtProductID
        FROM Customers c
        JOIN Orders o ON c.Customer_ID = o.Customer_ID
        LEFT JOIN Recommendations r ON c.Customer_ID = r.Customer_ID
    ) LOOP
        FOR recommended_product IN (
            SELECT r.Product_ID AS RecommendedProduct_ID
            FROM Reviews r
            WHERE r.Product_ID NOT IN (
                SELECT o.Product_ID
                FROM Orders o
                WHERE o.Customer_ID = customer.Customer_ID
            )
            AND r.Product_ID IN (
                SELECT p.Product_ID
                FROM Products p
                WHERE p.ProductCategory_ID IN (
                    SELECT p.ProductCategory_ID
                    FROM Products p
                    WHERE p.Product_ID = customer.BoughtProductID
                )
            )
            AND ROWNUM = 1
        ) LOOP
            -- Insert the recommendation
            INSERT INTO Recommendations(Recommendation_ID, Customer_ID, RecommendedProduct_ID, RecommendationDate)
            VALUES (Recommendation_ID_SEQ.NEXTVAL, customer.Customer_ID, recommended_product.RecommendedProduct_ID, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('Recommendation added successfully');
        END LOOP;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

**List_Recommendations Procedure**

-- Procedure to list all customer recommendations
CREATE OR REPLACE PROCEDURE List_Recommendations AS
BEGIN
    FOR recommendation_info IN (
        SELECT c.F_Name AS CustomerName, p.Product_Name AS RecommendedProduct, AVG(r.StarsGiven) AS AverageStars
        FROM Recommendations rec
        JOIN Customers c ON rec.Customer_ID = c.Customer_ID
        JOIN Products p ON rec.RecommendedProduct_ID = p.Product_ID
        JOIN Reviews r ON rec.RecommendedProduct_ID = r.Product_ID
        GROUP BY c.F_Name, p.ProductName
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || recommendation_info.CustomerName);
        DBMS_OUTPUT.PUT_LINE('Recommended Product: ' || recommendation_info.RecommendedProduct);
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || recommendation_info.AverageStars);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
