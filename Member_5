

/*This procedure receives a review from a person (anyone with an email)
for a particular product and adds the review in the Reviews table. Input to this
procedure is the reviewer's email, stars given (a number from 1-5), product ID, and
review text.*/

--Drop the sequence
DROP SEQUENCE ReviewID_SEQ;

-- Create the sequence for Review_ID
CREATE SEQUENCE ReviewID_SEQ START WITH 1 INCREMENT BY 1;

-- Procedure: Add_Review
CREATE OR REPLACE PROCEDURE Add_Review(
    p_reviewer_email IN VARCHAR2,
    p_stars_given IN NUMBER,
    p_product_name IN VARCHAR2,
    p_review_text IN VARCHAR2
) IS
    v_product_id Products.Product_ID%TYPE;
    v_review_id Reviews.Review_ID%TYPE;
BEGIN
    -- Find the product ID using the helper function
    v_product_id := FIND_PRODUCT_ID(p_product_name);

    -- Insert the review into the Reviews table
    INSERT INTO Reviews (Review_ID, Product_ID, ReviewerEmail, StarsGiven, ReviewText)
    VALUES (ReviewID_SEQ.NEXTVAL, v_product_id, p_reviewer_email, p_stars_given, p_review_text);

    DBMS_OUTPUT.PUT_LINE('Review added successfully.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error adding review: ' || SQLERRM);
END;



/*This procedure takes as input a number X and prints the best X
products and the worst X products based on the average star ratings of customers
who wrote a review for each product. It should first print: ‘Top rated products’ and then for
each line show the average number of stars (in descending order), product ID, product
name, and the standard deviation. Then print ‘Buyer Beware: Stay Away from...” then
each consecutive line shows the average number of stars (in ascending order),
product ID, product name, and the standard deviation.*/

-- Procedure: Buy_Or_Beware
CREATE OR REPLACE PROCEDURE Buy_Or_Beware(p_top_x IN NUMBER) IS
    CURSOR best_products_cur IS
        SELECT AVG(r.StarsGiven) AS avg_stars,
               p.Product_ID,
               p.Product_Name,
               STDDEV(r.StarsGiven) AS stars_deviation
        FROM Products p
        JOIN Reviews r ON p.Product_ID = r.Product_ID
        GROUP BY p.Product_ID, p.Product_Name
        ORDER BY avg_stars DESC;

    CURSOR worst_products_cur IS
        SELECT AVG(r.StarsGiven) AS avg_stars,
               p.Product_ID,
               p.Product_Name,
               STDDEV(r.StarsGiven) AS stars_deviation
        FROM Products p
        JOIN Reviews r ON p.Product_ID = r.Product_ID
        GROUP BY p.Product_ID, p.Product_Name
        ORDER BY avg_stars ASC;

    v_counter NUMBER := 0;
BEGIN
    -- Print top-rated products
    DBMS_OUTPUT.PUT_LINE('Top rated products:');
    FOR best_product IN best_products_cur LOOP
        EXIT WHEN v_counter >= p_top_x;
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || best_product.avg_stars ||
                             ' | Product ID: ' || best_product.Product_ID ||
                             ' | Product Name: ' || best_product.Product_Name ||
                             ' | Stars Deviation: ' || best_product.stars_deviation);
        v_counter := v_counter + 1;
    END LOOP;

    v_counter := 0; -- Reset counter for worst-rated products

    -- Print worst-rated products
    DBMS_OUTPUT.PUT_LINE('Buyer Beware: Stay Away from...');
    FOR worst_product IN worst_products_cur LOOP
        EXIT WHEN v_counter >= p_top_x;
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || worst_product.avg_stars ||
                             ' | Product ID: ' || worst_product.Product_ID ||
                             ' | Product Name: ' || worst_product.Product_Name ||
                             ' | Stars Deviation: ' || worst_product.stars_deviation);
        v_counter := v_counter + 1;
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in Buy_Or_Beware: ' || SQLERRM);
END;



/*This procedure calculates a recommendation for a
customer. The input is the customer ID. This procedure will insert a new
recommendation in the Recommendations table for a specific input customer as
follows: it will identify the best-rated product (based on reviews) in the same category
that the customer has bought a product before but has not bought that particular
recommended product yet.*/

--Drop the sequence
DROP SEQUENCE Recommendation_ID_SEQ;

-- Create a sequence
CREATE SEQUENCE Recommendation_ID_SEQ START WITH 1 INCREMENT BY 1;

-- Procedure to calculate a recommendation for a customer
CREATE OR REPLACE PROCEDURE Recommend_To_Customer(
    p_CustomerID IN NUMBER
) AS
    v_Customer_ID NUMBER;
    v_F_Name VARCHAR2(50);  -- Adjust the size as per your actual column size
    v_L_Name VARCHAR2(50);  -- Adjust the size as per your actual column size
    v_BoughtProduct_ID NUMBER;
    v_RecommendedProduct_ID NUMBER;

    -- Cursor declaration
    CURSOR cursorCustomers IS
        SELECT DISTINCT c.Customer_ID, c.F_Name, c.L_Name, r.RecommendedProduct_ID AS BoughtProductID
        FROM Customers c
        JOIN Orders o ON c.Customer_ID = o.Customer_ID
        LEFT JOIN Recommendation r ON c.Customer_ID = r.Customer_ID;

BEGIN
    OPEN cursorCustomers;

    FETCH cursorCustomers INTO v_Customer_ID, v_F_Name, v_L_Name, v_BoughtProduct_ID;

    WHILE cursorCustomers%FOUND LOOP
        -- Cursor declaration for recommended products
        FOR recommended_product IN (
            SELECT r.Product_ID
            FROM Reviews r
            WHERE r.Product_ID NOT IN (
                SELECT o.Product_ID
                FROM Orders o
                WHERE o.Customer_ID = v_Customer_ID
            )
            AND r.Product_ID IN (
                SELECT p.Product_ID
                FROM Products p
                WHERE p.ProductCategory_ID IN (
                    SELECT p.ProductCategory_ID
                    FROM Products p
                    WHERE p.Product_ID = v_BoughtProduct_ID
                )
            )
            AND ROWNUM = 1
        ) LOOP
            v_RecommendedProduct_ID := recommended_product.Product_ID;

            -- Insert the recommendation
            INSERT INTO Recommendation(Recommendation_ID, Customer_ID, RecommendedProduct_ID, RecommendationDate)
            VALUES (Recommendation_ID_SEQ.NEXTVAL, v_Customer_ID, v_RecommendedProduct_ID, SYSDATE);

            DBMS_OUTPUT.PUT_LINE('Recommendation added successfully');
        END LOOP;

        FETCH cursorCustomers INTO v_Customer_ID, v_F_Name, v_L_Name, v_BoughtProduct_ID;
    END LOOP;

    CLOSE cursorCustomers;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;



/*Provide a report that lists all customer recommendations.
This report prints the name of the customer, the recommended product, and its
average stars (one line per recommended product).*/

-- Procedure to list all customer recommendations
CREATE OR REPLACE PROCEDURE List_Recommendations AS
BEGIN
    FOR recommendation_info IN (
        SELECT c.F_Name AS CustomerName, p.Product_Name AS RecommendedProduct, AVG(r.StarsGiven) AS AverageStars
        FROM Recommendation rec
        JOIN Customers c ON rec.Customer_ID = c.Customer_ID
        JOIN Products p ON rec.RecommendedProduct_ID = p.Product_ID
        JOIN Reviews r ON rec.RecommendedProduct_ID = r.Product_ID
        GROUP BY c.F_Name, p.Product_Name
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || recommendation_info.CustomerName);
        DBMS_OUTPUT.PUT_LINE('Recommended Product: ' || recommendation_info.RecommendedProduct);
        DBMS_OUTPUT.PUT_LINE('Average Stars: ' || recommendation_info.AverageStars);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
