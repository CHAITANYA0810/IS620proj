-- Procedure to print all income to the online store by state
CREATE OR REPLACE PROCEDURE Income_By_State AS
BEGIN
    -- Loop through each state and calculate total income
    FOR state_income IN (
        -- Query to calculate total income by state
        SELECT c.State, SUM(i.Amount) AS TotalIncome
        FROM Invoices i
        JOIN Customers c ON i.Customer_ID = c.Customer_ID
        GROUP BY c.State
    ) LOOP
        -- Print state and total income for each state
        DBMS_OUTPUT.PUT_LINE('State: ' || state_income.State);
        DBMS_OUTPUT.PUT_LINE('Total Income: ' || state_income.TotalIncome);
        DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;
    -- Handle NO_DATA_FOUND exception if there are no records
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('No data found for income by state.');
        -- Handle other specific exceptions
        WHEN OTHERS THEN
            -- Log the error to an error log table or take appropriate action
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-- Procedure to list the top X best selling products
CREATE OR REPLACE PROCEDURE Best_Selling_Products(
    p_X IN NUMBER
) AS
v_Counter NUMBER := 0; -- Counter variable to track the number of iterations
BEGIN
    -- Loop through the best-selling products
    FOR best_selling_product IN (
        -- Query to calculate the top X best selling products
        SELECT p.Product_Name, pc.ProductCategory_Name, SUM(o.Quantity) AS TotalUnitsSold, SUM(i.Amount) AS TotalAmount
        FROM Products p
        JOIN Orders o ON p.Product_ID = o.Product_ID
        JOIN Product_Category pc ON p.ProductCategory_ID = pc.ProductCategory_ID
        JOIN Invoices i ON o.Order_ID = i.Order_ID
        GROUP BY p.Product_Name, pc.ProductCategory_Name
        ORDER BY TotalUnitsSold DESC
    ) LOOP
        -- Exit the loop when the desired number of products is reached
        v_Counter := v_Counter + 1;
        EXIT WHEN v_Counter > p_X;
        -- Print information about each best-selling product
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || best_selling_product.Product_Name);
        DBMS_OUTPUT.PUT_LINE('Category: ' || best_selling_product.ProductCategory_Name);
        DBMS_OUTPUT.PUT_LINE('Total Units Sold: ' || best_selling_product.TotalUnitsSold);
        DBMS_OUTPUT.PUT_LINE('Total Amount Collected: ' || best_selling_product.TotalAmount);
        DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;
EXCEPTION
    -- Handle the case when the input parameter is not valid
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Invalid input parameter.');
    -- Handle the case when there are no records found
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for best-selling products.');
    -- Handle other specific exceptions (add more as needed)
    WHEN OTHERS THEN
        -- Log the error to an error log table or take appropriate action
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-- Procedure to identify customers who followed recommended products
CREATE OR REPLACE PROCEDURE Recommendations_Follow_Up AS
BEGIN
    -- Cursor to iterate through recommendation information
    FOR recommendation_info IN (
        SELECT
            c.F_Name,
            p.Product_Name AS Recommended_Product,
            CASE
                -- Check if the product was ordered by the customer
                WHEN o.Order_ID IS NOT NULL THEN 'Recommendation followed'
                ELSE 'Recommendation not followed yet'
            END AS Follow_Up_Status
        FROM
            Recommendation rec
            JOIN Customers c ON rec.Customer_ID = c.Customer_ID
            JOIN Products p ON rec.RecommendedProduct_ID = p.Product_ID
            LEFT JOIN Orders o ON c.Customer_ID = o.Customer_ID AND rec.RecommendedProduct_ID = o.Product_ID
    ) LOOP
        -- Print customer information and follow-up status
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || recommendation_info.F_Name);
        DBMS_OUTPUT.PUT_LINE('Recommended Product: ' || recommendation_info.Recommended_Product);
        DBMS_OUTPUT.PUT_LINE('Follow-Up Status: ' || recommendation_info.Follow_Up_Status);
        DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;

EXCEPTION
    -- Handle specific exception when no data is found
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found.');
    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-- Procedure to identify products ordered within a time interval
CREATE OR REPLACE PROCEDURE Prod_Order_By_Time_Intvl(
    p_StartDate IN DATE,
    p_EndDate IN DATE
) AS
BEGIN
    -- Loop through each product_info
    FOR product_info IN (
        SELECT p.Product_Name, 
               SUM(o.Quantity) AS TotalUnitsOrdered, 
               COUNT(DISTINCT o.Customer_ID) AS TotalCustomers
        FROM Products p
        JOIN Orders o ON p.Product_ID = o.Product_ID
        WHERE o.Order_Date >= p_StartDate AND o.Order_Date < p_EndDate + 1
        GROUP BY p.Product_Name
    ) LOOP
        -- Print product information
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || product_info.Product_Name);
        DBMS_OUTPUT.PUT_LINE('Total Units Ordered: ' || product_info.TotalUnitsOrdered);
        DBMS_OUTPUT.PUT_LINE('Total Customers: ' || product_info.TotalCustomers);
        DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;
    
EXCEPTION
    -- Handle specific exception when no data is found
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found.');
    -- Handle specific exception when too many rows are found
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Too many rows found.');
    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
