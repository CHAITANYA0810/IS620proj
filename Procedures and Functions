 **Place_Order Procedure**  

-- Procedure to place an order
CREATE OR REPLACE PROCEDURE Place_Order(
    p_CustomerEmail IN VARCHAR2,
    p_ProductName IN VARCHAR2,
    p_Quantity IN NUMBER,
    p_CreditCardNumber IN VARCHAR2
) AS
    v_CustomerID NUMBER;
    v_ProductID NUMBER;
BEGIN
    -- Find the customer's ID using their email
    SELECT CustomerID INTO v_CustomerID
    FROM Customers
    WHERE Email = p_CustomerEmail;

    -- Find the product's ID using the product name
    SELECT ProductID INTO v_ProductID
    FROM Products
    WHERE ProductName = p_ProductName;

    -- Insert the order information
    INSERT INTO Orders(OrderID, CustomerID, ProductID, Quantity, OrderDate)
    VALUES (OrderID_SEQ.NEXTVAL, v_CustomerID, v_ProductID, p_Quantity, SYSDATE);
    COMMIT;

    -- Call Update_Inventory and Invoice_Customer procedures here
    Update_Inventory(p_ProductName, p_Quantity);
    Invoice_Customer(OrderID_SEQ.CURRVAL, v_CustomerID, p_CreditCardNumber, p_Quantity * (SELECT UnitPrice FROM Products WHERE ProductName = p_ProductName));
    
    DBMS_OUTPUT.PUT_LINE('Order placed successfully');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer or product not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;


**Show_Orders Procedure** 

-- Procedure to show all orders in the online marketplace
CREATE OR REPLACE PROCEDURE Show_Orders AS
BEGIN
    FOR order_info IN (
        SELECT c.Name AS CustomerName, p.ProductName, o.Quantity, (o.Quantity * p.UnitPrice) AS AmountCharged
        FROM Orders o
        JOIN Customers c ON o.CustomerID = c.CustomerID
        JOIN Products p ON o.ProductID = p.ProductID
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || order_info.CustomerName);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || order_info.ProductName);
        DBMS_OUTPUT.PUT_LINE('Quantity Ordered: ' || order_info.Quantity);
        DBMS_OUTPUT.PUT_LINE('Amount Charged: ' || order_info.AmountCharged);
    END LOOP;

    -- Add a line showing the grand total of all orders placed
    SELECT SUM(o.Quantity * p.UnitPrice) AS GrandTotal
    INTO v_GrandTotal
    FROM Orders o
    JOIN Products p ON o.ProductID = p.ProductID;

    DBMS_OUTPUT.PUT_LINE('Grand Total of All Orders: ' || v_GrandTotal);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;


**Report_Orders_by_State Procedure** 

-- Procedure to report orders by state
CREATE OR REPLACE PROCEDURE Report_Orders_by_State(
    p_State IN VARCHAR2
) AS
BEGIN
    FOR state_info IN (
        SELECT c.Name AS CustomerName, c.Email, COUNT(o.OrderID) AS TotalOrders, SUM(o.Quantity * p.UnitPrice) AS TotalAmount
        FROM Orders o
        JOIN Customers c ON o.CustomerID = c.CustomerID
        JOIN Products p ON o.ProductID = p.ProductID
        WHERE c.State = p_State
        GROUP BY c.Name, c.Email
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Customer Name: ' || state_info.CustomerName);
        DBMS_OUTPUT.PUT_LINE('Customer Email: ' || state_info.Email);
        DBMS_OUTPUT.PUT_LINE('Total Orders Placed: ' || state_info.TotalOrders);
        DBMS_OUTPUT.PUT_LINE('Total Amount Spent: ' || state_info.TotalAmount);
    END LOOP;

    -- Add a line showing the grand total amount spent in that state
    SELECT SUM(o.Quantity * p.UnitPrice) AS StateTotal
    INTO v_StateTotal
    FROM Orders o
    JOIN Customers c ON o.CustomerID = c.CustomerID
    JOIN Products p ON o.ProductID = p.ProductID
    WHERE c.State = p_State;

    DBMS_OUTPUT.PUT_LINE('Grand Total Amount Spent in ' || p_State || ': ' || v_StateTotal);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;


**Report_Low_Inventory Trigger and Procedure**

-- Create a trigger to automatically show low inventory products
CREATE OR REPLACE TRIGGER Low_Inventory_Trigger
BEFORE INSERT ON Orders
FOR EACH ROW
BEGIN
    IF (SELECT AvailableQuantity FROM Products WHERE ProductID = :new.ProductID) < 50 THEN
        DBMS_OUTPUT.PUT_LINE('Low Inventory Alert: Product ' || :new.ProductID || ' (' || (SELECT ProductName FROM Products WHERE ProductID = :new.ProductID) || ') is below 50 units.');
    END IF;
END;
/

-- Procedure to restock a specific product
CREATE OR REPLACE PROCEDURE Restock_Product(
    p_ProductName IN VARCHAR2,
    p_QuantityToAdd IN NUMBER
) AS
BEGIN
    -- Update the product's available quantity
    UPDATE Products
    SET AvailableQuantity = AvailableQuantity + p_QuantityToAdd
    WHERE ProductName = p_ProductName;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product restocked successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
